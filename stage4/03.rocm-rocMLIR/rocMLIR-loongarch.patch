diff --git a/external/llvm-project/clang/lib/Basic/Targets/LoongArch.h b/external/llvm-project/clang/lib/Basic/Targets/LoongArch.h
index 52c4ce425368..fbb7cff21c19 100644
--- a/external/llvm-project/clang/lib/Basic/Targets/LoongArch.h
+++ b/external/llvm-project/clang/lib/Basic/Targets/LoongArch.h
@@ -38,6 +38,8 @@ public:
     SuitableAlign = 128;
     WCharType = SignedInt;
     WIntType = UnsignedInt;
+    HasFloat128 = true;
+    HasFloat16 = true;
   }
 
   StringRef getABI() const override { return ABI; }
diff --git a/external/llvm-project/clang/lib/CodeGen/BackendUtil.cpp b/external/llvm-project/clang/lib/CodeGen/BackendUtil.cpp
index 43442b120a67..0646d40c2670 100644
--- a/external/llvm-project/clang/lib/CodeGen/BackendUtil.cpp
+++ b/external/llvm-project/clang/lib/CodeGen/BackendUtil.cpp
@@ -304,6 +304,7 @@ getCodeModel(const CodeGenOptions &CodeGenOpts) {
                            .Case("kernel", llvm::CodeModel::Kernel)
                            .Case("medium", llvm::CodeModel::Medium)
                            .Case("large", llvm::CodeModel::Large)
+                           .Case("extreme", llvm::CodeModel::Large)
                            .Case("default", ~1u)
                            .Default(~0u);
   assert(CodeModel != ~0u && "invalid code model!");
diff --git a/external/llvm-project/clang/lib/Driver/ToolChains/HIPUtility.cpp b/external/llvm-project/clang/lib/Driver/ToolChains/HIPUtility.cpp
index 8b9d8db90ffa..31fef17f6dbb 100644
--- a/external/llvm-project/clang/lib/Driver/ToolChains/HIPUtility.cpp
+++ b/external/llvm-project/clang/lib/Driver/ToolChains/HIPUtility.cpp
@@ -24,7 +24,7 @@ using namespace llvm::opt;
 #endif
 
 namespace {
-const unsigned HIPCodeObjectAlign = 4096;
+const unsigned HIPCodeObjectAlign = 65536;
 } // namespace
 
 // Constructs a triple string for clang offload bundler.
@@ -52,7 +52,12 @@ void HIP::constructHIPFatbinCommand(Compilation &C, const JobAction &JA,
 
   // ToDo: Remove the dummy host binary entry which is required by
   // clang-offload-bundler.
+#if defined(__x86_64)
   std::string BundlerTargetArg = "-targets=host-x86_64-unknown-linux";
+#elif defined(__loongarch64)
+  std::string BundlerTargetArg = "-targets=host-loongarch64-unknown-linux";
+#else
+#endif
   // AMDGCN:
   // For code object version 2 and 3, the offload kind in bundle ID is 'hip'
   // for backward compatibility. For code object version 4 and greater, the
diff --git a/external/llvm-project/clang/lib/Driver/ToolChains/Linux.cpp b/external/llvm-project/clang/lib/Driver/ToolChains/Linux.cpp
index 957ff0f83271..44116c7d4476 100644
--- a/external/llvm-project/clang/lib/Driver/ToolChains/Linux.cpp
+++ b/external/llvm-project/clang/lib/Driver/ToolChains/Linux.cpp
@@ -965,7 +965,7 @@ void Linux::AddHIPRuntimeLibArgs(const ArgList &Args,
     CmdArgs.append(
         {"-rpath", Args.MakeArgString(RocmInstallation->getLibPath())});
 
-  CmdArgs.push_back("-lamdhip64");
+  CmdArgs.push_back("/opt/rocm-next/lib64/libamdhip64.so");
 }
 
 void Linux::AddIAMCUIncludeArgs(const ArgList &DriverArgs,
diff --git a/external/llvm-project/clang/tools/clang-linker-wrapper/ClangLinkerWrapper.cpp b/external/llvm-project/clang/tools/clang-linker-wrapper/ClangLinkerWrapper.cpp
index d264dcdaf1d3..956242d402f7 100644
--- a/external/llvm-project/clang/tools/clang-linker-wrapper/ClangLinkerWrapper.cpp
+++ b/external/llvm-project/clang/tools/clang-linker-wrapper/ClangLinkerWrapper.cpp
@@ -339,9 +339,13 @@ fatbinary(ArrayRef<std::pair<StringRef, StringRef>> InputFiles,
   SmallVector<StringRef, 16> CmdArgs;
   CmdArgs.push_back(*OffloadBundlerPath);
   CmdArgs.push_back("-type=o");
-  CmdArgs.push_back("-bundle-align=4096");
-
+  CmdArgs.push_back("-bundle-align=65536");
+#if defined(__x86_64)
   SmallVector<StringRef> Targets = {"-targets=host-x86_64-unknown-linux"};
+#elif defined(__loongarch64)
+  SmallVector<StringRef> Targets = {"-targets=host-loongarch64-unknown-linux"};
+#else
+#endif
   for (const auto &[File, Arch] : InputFiles)
     Targets.push_back(Saver.save("hipv4-amdgcn-amd-amdhsa--" + Arch));
   CmdArgs.push_back(Saver.save(llvm::join(Targets, ",")));
@@ -459,6 +463,7 @@ Expected<StringRef> linkDevice(ArrayRef<StringRef> InputFiles,
   case Triple::aarch64_be:
   case Triple::ppc64:
   case Triple::ppc64le:
+  case Triple::loongarch64:
     return generic::clang(InputFiles, Args);
   default:
     return createStringError(inconvertibleErrorCode(),
diff --git a/external/llvm-project/llvm/lib/Target/LoongArch/LoongArchISelLowering.cpp b/external/llvm-project/llvm/lib/Target/LoongArch/LoongArchISelLowering.cpp
index 4977b8e6f987..aaa93ad2317a 100644
--- a/external/llvm-project/llvm/lib/Target/LoongArch/LoongArchISelLowering.cpp
+++ b/external/llvm-project/llvm/lib/Target/LoongArch/LoongArchISelLowering.cpp
@@ -207,6 +207,20 @@ LoongArchTargetLowering::LoongArchTargetLowering(const TargetMachine &TM,
   setTargetDAGCombine(ISD::AND);
   setTargetDAGCombine(ISD::OR);
   setTargetDAGCombine(ISD::SRL);
+    // Lower f16 conversion operations into library calls
+  setOperationAction(ISD::FP16_TO_FP,        MVT::f32,   Expand);
+  setOperationAction(ISD::FP_TO_FP16,        MVT::f32,   Expand);
+  setOperationAction(ISD::FP16_TO_FP,        MVT::f64,   Expand);
+  setOperationAction(ISD::FP_TO_FP16,        MVT::f64,   Expand);
+  setOperationAction(ISD::SPLAT_VECTOR, MVT::f16, Custom);
+  setTruncStoreAction(MVT::f32, MVT::f16, Expand);
+
+  setLoadExtAction(ISD::EXTLOAD, MVT::f32, MVT::f16, Expand);
+  setLibcallName(RTLIB::FPEXT_F16_F32, "__extendhfsf2");
+  setLibcallName(RTLIB::FPROUND_F32_F16, "__truncsfhf2");
+  setLoadExtAction(ISD::EXTLOAD, MVT::f64, MVT::f16, Expand);
+  setTruncStoreAction(MVT::f64, MVT::f16, Expand);
+
 }
 
 bool LoongArchTargetLowering::isOffsetFoldingLegal(
diff --git a/mlir/lib/Dialect/Rock/Generator/ConvGenerator.cpp b/mlir/lib/Dialect/Rock/Generator/ConvGenerator.cpp
index 08dc4529e9e5..0abe46409b06 100644
--- a/mlir/lib/Dialect/Rock/Generator/ConvGenerator.cpp
+++ b/mlir/lib/Dialect/Rock/Generator/ConvGenerator.cpp
@@ -497,36 +497,6 @@ LogicalResult ConvGenerator::parseConvConfig(OpBuilder &builder,
   std::map<std::string, std::string> argMap;
   strToTokens(arguments, argMap);
 
-  auto isValid = [&argMap]() {
-    // only require tensor configs
-    static const std::vector<std::string> validKeys = {
-        "batchsize",   "groupsize",    "in_layout", "in_type",
-        "in_channels", "in_h",         "in_w",      "out_layout",
-        "out_type",    "out_channels", "out_h",     "out_w",
-        "fil_layout",  "fil_type",     "fil_w",     "fil_h"};
-    if (!std::all_of(validKeys.cbegin(), validKeys.cend(),
-                     [&argMap](const std::string &key) {
-                       return argMap.count(key) > 0;
-                     })) {
-      return false;
-    }
-    static const std::vector<std::string> layoutArgs = {
-        "fil_layout", "in_layout", "out_layout"};
-
-    if (!std::all_of(layoutArgs.cbegin(), layoutArgs.cend(),
-                     [&argMap](const std::string &key) {
-                       return argMap[key].length() == 5;
-                     })) {
-      return false;
-    }
-    return true;
-  };
-
-  // Proceed only if we have a valid argMap. Otherwise leave the handle to be
-  // empty
-  if (!isValid())
-    return failure();
-
   auto strToLong = [&argMap](const std::string &argKey) {
     return std::stoul(argMap[argKey]);
   };
diff --git a/mlir/tools/xmir-runner/CMakeLists.txt b/mlir/tools/xmir-runner/CMakeLists.txt
index 81f484a51ce5..d30fc17c29bf 100644
--- a/mlir/tools/xmir-runner/CMakeLists.txt
+++ b/mlir/tools/xmir-runner/CMakeLists.txt
@@ -14,6 +14,7 @@ if(MLIR_ENABLE_ROCM_RUNNER)
     ${rocmlir_conversion_libs}
     ${rocmlir_test_libs}
     LLVMX86AsmParser
+    LLVMLoongArchAsmParser
     MLIRMHAL
     MLIRMHALTransforms
     MLIRMHALPipeline
