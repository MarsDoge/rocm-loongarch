diff --git a/external/llvm-project/clang/lib/Basic/Targets/LoongArch.h b/external/llvm-project/clang/lib/Basic/Targets/LoongArch.h
index 52c4ce425368..0c0a509704b2 100644
--- a/external/llvm-project/clang/lib/Basic/Targets/LoongArch.h
+++ b/external/llvm-project/clang/lib/Basic/Targets/LoongArch.h
@@ -38,6 +38,8 @@ public:
     SuitableAlign = 128;
     WCharType = SignedInt;
     WIntType = UnsignedInt;
+//    HasFloat128 = true;
+    HasFloat16 = true;
   }
 
   StringRef getABI() const override { return ABI; }
diff --git a/external/llvm-project/clang/lib/Driver/ToolChains/HIPUtility.cpp b/external/llvm-project/clang/lib/Driver/ToolChains/HIPUtility.cpp
index 8b9d8db90ffa..c0b3c1f2b4b3 100644
--- a/external/llvm-project/clang/lib/Driver/ToolChains/HIPUtility.cpp
+++ b/external/llvm-project/clang/lib/Driver/ToolChains/HIPUtility.cpp
@@ -52,7 +52,12 @@ void HIP::constructHIPFatbinCommand(Compilation &C, const JobAction &JA,
 
   // ToDo: Remove the dummy host binary entry which is required by
   // clang-offload-bundler.
+#if defined(__x86_64)
   std::string BundlerTargetArg = "-targets=host-x86_64-unknown-linux";
+#elif defined(__loongarch64)
+  std::string BundlerTargetArg = "-targets=host-loongarch64-unknown-linux";
+#else
+#endif
   // AMDGCN:
   // For code object version 2 and 3, the offload kind in bundle ID is 'hip'
   // for backward compatibility. For code object version 4 and greater, the
diff --git a/external/llvm-project/clang/test/CodeGen/fp16-ops.c b/external/llvm-project/clang/test/CodeGen/fp16-ops.c
index 0626e0aaed9d..8a644bd07931 100644
--- a/external/llvm-project/clang/test/CodeGen/fp16-ops.c
+++ b/external/llvm-project/clang/test/CodeGen/fp16-ops.c
@@ -1,5 +1,5 @@
-// REQUIRES: arm-registered-target
 // RUN: %clang_cc1 -emit-llvm -o - -triple arm-none-linux-gnueabi %s | FileCheck %s --check-prefix=NOTNATIVE --check-prefix=CHECK
+// RUN: %clang_cc1 -emit-llvm -o - -triple loongarch64-linux-gnu %s | FileCheck %s --check-prefix=NOTNATIVE --check-prefix=CHECK
 // RUN: %clang_cc1 -emit-llvm -o - -triple aarch64-none-linux-gnueabi %s | FileCheck %s --check-prefix=NOTNATIVE --check-prefix=CHECK
 // RUN: %clang_cc1 -emit-llvm -o - -triple x86_64-linux-gnu %s | FileCheck %s --check-prefix=NOTNATIVE --check-prefix=CHECK
 // RUN: %clang_cc1 -emit-llvm -o - -triple arm-none-linux-gnueabi -fnative-half-type %s \
diff --git a/external/llvm-project/clang/tools/clang-linker-wrapper/ClangLinkerWrapper.cpp b/external/llvm-project/clang/tools/clang-linker-wrapper/ClangLinkerWrapper.cpp
index d264dcdaf1d3..545ccbd239b3 100644
--- a/external/llvm-project/clang/tools/clang-linker-wrapper/ClangLinkerWrapper.cpp
+++ b/external/llvm-project/clang/tools/clang-linker-wrapper/ClangLinkerWrapper.cpp
@@ -340,8 +340,12 @@ fatbinary(ArrayRef<std::pair<StringRef, StringRef>> InputFiles,
   CmdArgs.push_back(*OffloadBundlerPath);
   CmdArgs.push_back("-type=o");
   CmdArgs.push_back("-bundle-align=4096");
-
+#if defined(__x86_64)
   SmallVector<StringRef> Targets = {"-targets=host-x86_64-unknown-linux"};
+#elif defined(__loongarch64)
+  SmallVector<StringRef> Targets = {"-targets=host-loongarch64-unknown-linux"};
+#else
+#endif
   for (const auto &[File, Arch] : InputFiles)
     Targets.push_back(Saver.save("hipv4-amdgcn-amd-amdhsa--" + Arch));
   CmdArgs.push_back(Saver.save(llvm::join(Targets, ",")));
@@ -459,6 +463,7 @@ Expected<StringRef> linkDevice(ArrayRef<StringRef> InputFiles,
   case Triple::aarch64_be:
   case Triple::ppc64:
   case Triple::ppc64le:
+  case Triple::loongarch64:
     return generic::clang(InputFiles, Args);
   default:
     return createStringError(inconvertibleErrorCode(),
diff --git a/external/llvm-project/llvm/lib/Target/LoongArch/LoongArchFloat32InstrInfo.td b/external/llvm-project/llvm/lib/Target/LoongArch/LoongArchFloat32InstrInfo.td
index eb49ae329ebe..77c724dacd53 100644
--- a/external/llvm-project/llvm/lib/Target/LoongArch/LoongArchFloat32InstrInfo.td
+++ b/external/llvm-project/llvm/lib/Target/LoongArch/LoongArchFloat32InstrInfo.td
@@ -18,6 +18,13 @@ def SDT_LoongArchMOVGR2FR_W_LA64
     : SDTypeProfile<1, 1, [SDTCisVT<0, f32>, SDTCisVT<1, i64>]>;
 def SDT_LoongArchMOVFR2GR_S_LA64
     : SDTypeProfile<1, 1, [SDTCisVT<0, i64>, SDTCisVT<1, f32>]>;
+
+def SDT_LoongArchMOVHGR2GR_W_LA64
+    : SDTypeProfile<1, 1, [SDTCisVT<0, f16>, SDTCisVT<1, i64>]>;
+
+def SDT_LoongArchMOVHFR2GR_S_LA64
+    : SDTypeProfile<1, 1, [SDTCisVT<0, i64>, SDTCisVT<1, f16>]>;
+
 def SDT_LoongArchFTINT : SDTypeProfile<1, 1, [SDTCisFP<0>, SDTCisFP<1>]>;
 
 def loongarch_movgr2fr_w_la64
diff --git a/external/llvm-project/llvm/lib/Target/LoongArch/LoongArchISelLowering.cpp b/external/llvm-project/llvm/lib/Target/LoongArch/LoongArchISelLowering.cpp
index 4977b8e6f987..b70e3d2343e4 100644
--- a/external/llvm-project/llvm/lib/Target/LoongArch/LoongArchISelLowering.cpp
+++ b/external/llvm-project/llvm/lib/Target/LoongArch/LoongArchISelLowering.cpp
@@ -77,6 +77,8 @@ LoongArchTargetLowering::LoongArchTargetLowering(const TargetMachine &TM,
 
   setOperationAction(ISD::INTRINSIC_WO_CHAIN, MVT::Other, Custom);
 
+  setLibcallName(RTLIB::FPEXT_F16_F32, "__extendhfsf2");
+  setLibcallName(RTLIB::FPROUND_F32_F16, "__truncsfhf2");
   setOperationAction(ISD::EH_DWARF_CFA, MVT::i32, Custom);
   if (Subtarget.is64Bit())
     setOperationAction(ISD::EH_DWARF_CFA, MVT::i64, Custom);
@@ -86,6 +88,12 @@ LoongArchTargetLowering::LoongArchTargetLowering(const TargetMachine &TM,
   setOperationAction(ISD::VASTART, MVT::Other, Custom);
   setOperationAction({ISD::VAARG, ISD::VACOPY, ISD::VAEND}, MVT::Other, Expand);
 
+  // Lower f16 conversion operations into library calls
+  setOperationAction(ISD::FP16_TO_FP,        MVT::f32,   Expand);
+  setOperationAction(ISD::FP_TO_FP16,        MVT::f32,   Expand);
+  setOperationAction(ISD::FP16_TO_FP,        MVT::f64,   Expand);
+  setOperationAction(ISD::FP_TO_FP16,        MVT::f64,   Expand);
+
   if (Subtarget.is64Bit()) {
     setOperationAction(ISD::SHL, MVT::i32, Custom);
     setOperationAction(ISD::SRA, MVT::i32, Custom);
@@ -168,9 +176,20 @@ LoongArchTargetLowering::LoongArchTargetLowering(const TargetMachine &TM,
     setOperationAction(ISD::FREM, MVT::f64, Expand);
     setTruncStoreAction(MVT::f64, MVT::f32, Expand);
   }
-
+  setOperationAction(
+      {ISD::VP_MERGE, ISD::VP_SELECT, ISD::VSELECT, ISD::SELECT}, MVT::f16,
+      Custom);
+  setOperationAction(ISD::FP16_TO_FP, MVT::f32, Expand);
+  setOperationAction(ISD::FP_TO_FP16, MVT::f32, Expand);
+  setLoadExtAction(ISD::EXTLOAD, MVT::f32, MVT::f16, Expand);
+  setTruncStoreAction(MVT::f32, MVT::f16, Expand);
+  setOperationAction(ISD::SPLAT_VECTOR, MVT::f16, Custom);
   setOperationAction(ISD::BR_JT, MVT::Other, Expand);
 
+  setLoadExtAction(ISD::EXTLOAD, MVT::f64, MVT::f16, Expand);
+  setTruncStoreAction(MVT::f64, MVT::f16, Expand);
+
+
   setOperationAction(ISD::BR_CC, GRLenVT, Expand);
   setOperationAction(ISD::SELECT_CC, GRLenVT, Expand);
   setOperationAction(ISD::SIGN_EXTEND_INREG, MVT::i1, Expand);
diff --git a/mlir/tools/rocmlir-lib/librockcompiler_deps.cmake b/mlir/tools/rocmlir-lib/librockcompiler_deps.cmake
index d17821a8e256..5d46e6fa87bf 100644
--- a/mlir/tools/rocmlir-lib/librockcompiler_deps.cmake
+++ b/mlir/tools/rocmlir-lib/librockcompiler_deps.cmake
@@ -175,11 +175,13 @@ MLIRVectorToSCF
 MLIRVectorTransforms
 MLIRVectorUtils
 MLIRViewLikeInterface
-MLIRX86VectorDialect
-MLIRX86VectorTransforms
 lldCommon
 lldELF
 )
+
+#MLIRX86VectorDialect
+#MLIRX86VectorTransforms
+
 set(__rocmlir_libs
 MLIRCAPIMIGraphX
 MLIRCAPIRegisterRocMLIR
diff --git a/mlir/tools/xmir-runner/CMakeLists.txt b/mlir/tools/xmir-runner/CMakeLists.txt
index 81f484a51ce5..ba123202c936 100644
--- a/mlir/tools/xmir-runner/CMakeLists.txt
+++ b/mlir/tools/xmir-runner/CMakeLists.txt
@@ -13,7 +13,7 @@ if(MLIR_ENABLE_ROCM_RUNNER)
     ${rocmlir_dialect_libs}
     ${rocmlir_conversion_libs}
     ${rocmlir_test_libs}
-    LLVMX86AsmParser
+    LLVMLoongArchAsmParser
     MLIRMHAL
     MLIRMHALTransforms
     MLIRMHALPipeline
@@ -21,7 +21,6 @@ if(MLIR_ENABLE_ROCM_RUNNER)
     MLIRRocmExecutionEngineUtils
     MLIRJitRunner
   )
-
   add_rocmlir_tool(xmir-runner
     xmir-runner.cpp
     )
