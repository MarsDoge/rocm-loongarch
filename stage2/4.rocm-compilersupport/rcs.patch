diff --git a/lib/comgr/src/comgr-compiler.cpp b/lib/comgr/src/comgr-compiler.cpp
index 296b1cf..af9e7c4 100644
--- a/lib/comgr/src/comgr-compiler.cpp
+++ b/lib/comgr/src/comgr-compiler.cpp
@@ -90,7 +90,7 @@ using namespace clang;
 using namespace clang::driver;
 using namespace clang::driver::options;
 using namespace TimeStatistics;
-
+LLD_HAS_DRIVER(elf)
 namespace COMGR {
 
 namespace {
@@ -201,10 +201,11 @@ bool AssemblerInvocation::createFromArgs(AssemblerInvocation &Opts,
   // Parse the arguments.
   const OptTable &OptTbl = getDriverOptTable();
 
-  const unsigned IncludedFlagsBitmask = options::CC1AsOption;
+  const auto IncludedFlagsBitmask = llvm::opt::Visibility(options::CC1AsOption);
   unsigned MissingArgIndex, MissingArgCount;
   InputArgList Args = OptTbl.ParseArgs(Argv, MissingArgIndex, MissingArgCount,
-                                       IncludedFlagsBitmask);
+                                       IncludedFlagsBitmask
+                                       );
 
   // Check for missing argument error.
   if (MissingArgCount) {
@@ -1043,7 +1044,7 @@ amd_comgr_status_t AMDGPUCompiler::addCompilationFlags() {
     Args.push_back("hip");
     Args.push_back("-std=c++11");
     Args.push_back("-target");
-    Args.push_back("x86_64-unknown-linux-gnu");
+    Args.push_back("loongarch64-unknown-linux-gnu");
     Args.push_back("--cuda-device-only");
     Args.push_back("-isystem");
     Args.push_back(ROCMIncludePath.c_str());
diff --git a/lib/comgr/src/comgr-disassembly.cpp b/lib/comgr/src/comgr-disassembly.cpp
index 8703c0d..31e9634 100644
--- a/lib/comgr/src/comgr-disassembly.cpp
+++ b/lib/comgr/src/comgr-disassembly.cpp
@@ -34,6 +34,7 @@
  ******************************************************************************/
 
 #include "comgr-disassembly.h"
+#include "llvm/ADT/StringExtras.h"
 #include "llvm/MC/TargetRegistry.h"
 
 using namespace llvm;
diff --git a/lib/comgr/src/comgr-env.cpp b/lib/comgr/src/comgr-env.cpp
index 6ab6f0f..e756f3d 100644
--- a/lib/comgr/src/comgr-env.cpp
+++ b/lib/comgr/src/comgr-env.cpp
@@ -50,7 +50,7 @@ bool shouldSaveTemps() {
   return SaveTemps && StringRef(SaveTemps) != "0";
 }
 
-Optional<StringRef> getRedirectLogs() {
+std::optional<StringRef> getRedirectLogs() {
   static char *RedirectLogs = getenv("AMD_COMGR_REDIRECT_LOGS");
   if (!RedirectLogs || StringRef(RedirectLogs) == "0") {
     return std::nullopt;
@@ -64,8 +64,8 @@ bool needTimeStatistics() {
 }
 
 bool shouldEmitVerboseLogs() {
-  static char *VerboseLogs = getenv("AMD_COMGR_EMIT_VERBOSE_LOGS");
-  return VerboseLogs && StringRef(VerboseLogs) != "0";
+//  static char *VerboseLogs = getenv("AMD_COMGR_EMIT_VERBOSE_LOGS");
+  return true;
 }
 
 StringRef StripGNUInstallLibDir(StringRef Path) {
diff --git a/lib/comgr/src/comgr-env.h b/lib/comgr/src/comgr-env.h
index aef57b3..7ca644e 100644
--- a/lib/comgr/src/comgr-env.h
+++ b/lib/comgr/src/comgr-env.h
@@ -36,7 +36,6 @@
 #ifndef COMGR_ENV_H
 #define COMGR_ENV_H
 
-#include "llvm/ADT/Optional.h"
 #include "llvm/ADT/StringRef.h"
 
 namespace COMGR {
@@ -47,7 +46,7 @@ bool shouldSaveTemps();
 
 /// If the environment requests logs be redirected, return the string identifier
 /// of where to redirect. Otherwise return @p None.
-llvm::Optional<llvm::StringRef> getRedirectLogs();
+std::optional<llvm::StringRef> getRedirectLogs();
 
 /// Return whether the environment requests verbose logging.
 bool shouldEmitVerboseLogs();
diff --git a/lib/comgr/src/comgr-metadata.cpp b/lib/comgr/src/comgr-metadata.cpp
index a3375b4..dd390b1 100644
--- a/lib/comgr/src/comgr-metadata.cpp
+++ b/lib/comgr/src/comgr-metadata.cpp
@@ -223,7 +223,7 @@ static bool mergeNoteRecords(llvm::msgpack::DocNode &From,
 template <class ELFT>
 static bool processNote(const Elf_Note<ELFT> &Note, DataMeta *MetaP,
                         llvm::msgpack::DocNode &Root) {
-  auto DescString = Note.getDescAsStringRef();
+  auto DescString = Note.getDescAsStringRef(4);
 
   if (Note.getName() == "AMD" && Note.getType() == ELF::NT_AMD_HSA_METADATA) {
 
@@ -557,7 +557,7 @@ getElfIsaNameFromElfNotes(const ELFObjectFile<ELFT> *Obj,
 
     switch (Note.getType()) {
     case ELF::NT_AMD_HSA_CODE_OBJECT_VERSION: {
-      if (Note.getDesc().size() <
+      if (Note.getDesc(4).size() <
           sizeof(amdgpu_hsa_note_code_object_version_s)) {
         IsError = true;
         return true;
@@ -565,7 +565,7 @@ getElfIsaNameFromElfNotes(const ELFObjectFile<ELFT> *Obj,
 
       const auto *NoteCodeObjectVersion =
           reinterpret_cast<const amdgpu_hsa_note_code_object_version_s *>(
-              Note.getDesc().data());
+              Note.getDesc(4).data());
 
       // Only code objects up to version 2 used note records.
       if (NoteCodeObjectVersion->major_version > 2) {
@@ -578,7 +578,7 @@ getElfIsaNameFromElfNotes(const ELFObjectFile<ELFT> *Obj,
     }
 
     case ELF::NT_AMD_HSA_HSAIL: {
-      if (Note.getDesc().size() < sizeof(amdgpu_hsa_note_hsail_s)) {
+      if (Note.getDesc(4).size() < sizeof(amdgpu_hsa_note_hsail_s)) {
         IsError = true;
         return true;
       }
@@ -588,21 +588,21 @@ getElfIsaNameFromElfNotes(const ELFObjectFile<ELFT> *Obj,
     }
 
     case ELF::NT_AMD_HSA_ISA_VERSION: {
-      if (Note.getDesc().size() <
+      if (Note.getDesc(4).size() <
           offsetof(amdgpu_hsa_note_isa_s, vendor_and_architecture_name)) {
         IsError = true;
         return true;
       }
 
       const auto *NoteIsa = reinterpret_cast<const amdgpu_hsa_note_isa_s *>(
-          Note.getDesc().data());
+          Note.getDesc(4).data());
 
       if (!NoteIsa->vendor_name_size || !NoteIsa->architecture_name_size) {
         IsError = true;
         return true;
       }
 
-      if (Note.getDesc().size() <
+      if (Note.getDesc(4).size() <
           offsetof(amdgpu_hsa_note_isa_s, vendor_and_architecture_name) +
               NoteIsa->vendor_name_size + NoteIsa->architecture_name_size) {
         IsError = true;
@@ -1013,7 +1013,7 @@ amd_comgr_status_t lookUpCodeObject(DataObject *DataP,
 
   int Seen = 0;
   BinaryStreamReader Reader(StringRef(DataP->Data, DataP->Size),
-                            support::little);
+                            endianness::little);
 
   StringRef Magic;
   if (auto EC = Reader.readFixedString(Magic, OffloadBundleMagicLen)) {
diff --git a/lib/comgr/src/comgr-objdump.cpp b/lib/comgr/src/comgr-objdump.cpp
index ff3f996..cae7aa3 100644
--- a/lib/comgr/src/comgr-objdump.cpp
+++ b/lib/comgr/src/comgr-objdump.cpp
@@ -39,7 +39,6 @@
 #include "comgr-objdump.h"
 #include "comgr.h"
 #include "lld/Common/TargetOptionsCommandFlags.h"
-#include "llvm/ADT/Optional.h"
 #include "llvm/ADT/STLExtras.h"
 #include "llvm/ADT/StringExtras.h"
 #include "llvm/CodeGen/CommandFlags.h"
@@ -2145,7 +2144,7 @@ void llvm::DisassemHelper::printRawClangAST(const ObjectFile *Obj) {
     ClangASTSectionName = "clangast";
   }
 
-  Optional<object::SectionRef> ClangASTSection;
+  std::optional<object::SectionRef> ClangASTSection;
   for (auto Sec : toolSectionFilter(*Obj)) {
     StringRef Name;
     auto NameOrErr = Sec.getName();
@@ -2188,7 +2187,7 @@ void llvm::DisassemHelper::printFaultMaps(const ObjectFile *Obj) {
     return;
   }
 
-  Optional<object::SectionRef> FaultMapSection;
+  std::optional<object::SectionRef> FaultMapSection;
 
   for (auto Sec : toolSectionFilter(*Obj)) {
     StringRef Name;
diff --git a/lib/comgr/src/comgr-symbolizer.cpp b/lib/comgr/src/comgr-symbolizer.cpp
index cfdeee8..36643cf 100644
--- a/lib/comgr/src/comgr-symbolizer.cpp
+++ b/lib/comgr/src/comgr-symbolizer.cpp
@@ -57,6 +57,16 @@ static llvm::symbolize::PrinterConfig getDefaultPrinterConfig() {
   return Config;
 }
 
+static llvm::symbolize::ErrorHandler symbolize_error_handler(
+    llvm::raw_string_ostream &OS) {
+  return
+      [&](const llvm::ErrorInfoBase &ErrorInfo, llvm::StringRef ErrorBanner) {
+        OS << ErrorBanner;
+        ErrorInfo.log(OS);
+        OS << '\n';
+      };
+}
+
 Symbolizer::Symbolizer(std::unique_ptr<ObjectFile> &&CodeObject,
                        PrintSymbolCallback PrintSymbol)
     : CodeObject(std::move(CodeObject)), PrintSymbol(PrintSymbol) {}
@@ -93,7 +103,7 @@ amd_comgr_status_t Symbolizer::symbolize(uint64_t Address, bool IsCode,
   llvm::raw_string_ostream OS(Result);
   llvm::symbolize::PrinterConfig Config = getDefaultPrinterConfig();
   llvm::symbolize::Request Request{"", Address};
-  auto Printer = std::make_unique<llvm::symbolize::LLVMPrinter>(OS, OS, Config);
+  auto Printer = std::make_unique<llvm::symbolize::LLVMPrinter>(OS, symbolize_error_handler(OS), Config);
 
   if (IsCode) {
     auto ResOrErr = SymbolizerImpl.symbolizeInlinedCode(
diff --git a/lib/comgr/src/comgr.cpp b/lib/comgr/src/comgr.cpp
index 3e87e2e..2d4ce3e 100644
--- a/lib/comgr/src/comgr.cpp
+++ b/lib/comgr/src/comgr.cpp
@@ -1288,7 +1288,7 @@ amd_comgr_status_t AMD_COMGR_API
     // Pointer to the currently selected log stream.
     raw_ostream *LogP = &LogS;
 
-    if (Optional<StringRef> RedirectLogs = env::getRedirectLogs()) {
+    if (std::optional<StringRef> RedirectLogs = env::getRedirectLogs()) {
       StringRef RedirectLog = *RedirectLogs;
       if (RedirectLog == "stdout") {
         LogP = &outs();
diff --git a/lib/comgr/src/time-stat/time-stat.cpp b/lib/comgr/src/time-stat/time-stat.cpp
index 1df3f0e..9b24983 100644
--- a/lib/comgr/src/time-stat/time-stat.cpp
+++ b/lib/comgr/src/time-stat/time-stat.cpp
@@ -5,7 +5,6 @@
 #include <system_error>
 
 #include "comgr-env.h"
-#include "llvm/ADT/Optional.h"
 #include "llvm/ADT/StringRef.h"
 #include "llvm/Support/Debug.h"
 #include "llvm/Support/FileSystem.h"
@@ -29,7 +28,7 @@ static std::unique_ptr<PerfStats> PS = nullptr;
 static void dump() { PS->dumpPerfStats(); }
 
 void GetLogFile(std::string &PerfLog) {
-  if (Optional<StringRef> RedirectLogs = env::getRedirectLogs()) {
+  if (std::optional<StringRef> RedirectLogs = env::getRedirectLogs()) {
     PerfLog = (*RedirectLogs).str();
     return;
   }
