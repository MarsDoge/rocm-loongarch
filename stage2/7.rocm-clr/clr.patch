diff --git a/hipamd/src/hip_graph_internal.cpp b/hipamd/src/hip_graph_internal.cpp
index ebcf4c91e..fac22ffd3 100644
--- a/hipamd/src/hip_graph_internal.cpp
+++ b/hipamd/src/hip_graph_internal.cpp
@@ -443,9 +443,17 @@ hipError_t GraphExec::CaptureAQLPackets() {
                  kernarg_pool_size_graph_ != 0) {
         address dev_ptr = kernarg_pool_graph_ + kernarg_pool_size_graph_;
         auto kSentinel = *reinterpret_cast<volatile unsigned char*>(dev_ptr - 1);
+#if defined(__x86_64__)
         _mm_sfence();
+#else
+        asm("dbar 0");
+#endif
         *(dev_ptr - 1) = kSentinel;
+#if defined(__x86_64__)
         _mm_mfence();
+#else
+        asm("dbar 0");
+#endif
         kSentinel = *reinterpret_cast<volatile unsigned char*>(dev_ptr - 1);
       }
     }
diff --git a/rocclr/device/rocm/rocvirtual.cpp b/rocclr/device/rocm/rocvirtual.cpp
index 169e81e65..b589e253c 100644
--- a/rocclr/device/rocm/rocvirtual.cpp
+++ b/rocclr/device/rocm/rocvirtual.cpp
@@ -3247,9 +3247,18 @@ bool VirtualGPU::submitKernelInternal(const amd::NDRangeContainer& sizes,
           auto kSentinel = *reinterpret_cast<volatile int*>(dev().info().hdpMemFlushCntl);
         } else if (kernArgImpl == KernelArgImpl::DeviceKernelArgsReadback &&
                    argSize != 0) {
+#if defined(__x86_64__)
           _mm_sfence();
+#else
+          asm("dbar 0");
+#endif
           *(argBuffer + argSize - 1) = *(parameters + argSize - 1);
+#if defined(__x86_64__)
           _mm_mfence();
+#else
+          asm("dbar 0");
+#endif
+
           auto kSentinel = *reinterpret_cast<volatile unsigned char*>(
               argBuffer + argSize - 1);
         }
diff --git a/rocclr/os/os_posix.cpp b/rocclr/os/os_posix.cpp
index 739795e0c..7174b53e7 100644
--- a/rocclr/os/os_posix.cpp
+++ b/rocclr/os/os_posix.cpp
@@ -318,8 +318,10 @@ void Os::currentStackInfo(address* base, size_t* size) {
 
   ::pthread_attr_destroy(&threadAttr);
 
+#if !defined(__loongarch64)
   assert(Os::currentStackPtr() >= *base - *size && Os::currentStackPtr() < *base &&
          "just checking");
+#endif
 }
 
 void Os::setCurrentThreadName(const char* name) { ::prctl(PR_SET_NAME, name); }
