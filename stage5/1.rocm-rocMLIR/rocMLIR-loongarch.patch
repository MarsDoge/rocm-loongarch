diff --git a/external/llvm-project/clang/lib/Basic/Targets/LoongArch.h b/external/llvm-project/clang/lib/Basic/Targets/LoongArch.h
index 68572843f2d7..c46b7982e6dc 100644
--- a/external/llvm-project/clang/lib/Basic/Targets/LoongArch.h
+++ b/external/llvm-project/clang/lib/Basic/Targets/LoongArch.h
@@ -44,6 +44,8 @@ public:
     SuitableAlign = 128;
     WCharType = SignedInt;
     WIntType = UnsignedInt;
+    HasFloat128 = true;
+    HasFloat16 = true;
   }
 
   bool setCPU(const std::string &Name) override {
diff --git a/external/llvm-project/clang/lib/CodeGen/BackendUtil.cpp b/external/llvm-project/clang/lib/CodeGen/BackendUtil.cpp
index 22c3f8642ad8..a1d1604113b2 100644
--- a/external/llvm-project/clang/lib/CodeGen/BackendUtil.cpp
+++ b/external/llvm-project/clang/lib/CodeGen/BackendUtil.cpp
@@ -302,6 +302,7 @@ getCodeModel(const CodeGenOptions &CodeGenOpts) {
                            .Case("kernel", llvm::CodeModel::Kernel)
                            .Case("medium", llvm::CodeModel::Medium)
                            .Case("large", llvm::CodeModel::Large)
+                           .Case("extreme", llvm::CodeModel::Large)
                            .Case("default", ~1u)
                            .Default(~0u);
   assert(CodeModel != ~0u && "invalid code model!");
diff --git a/external/llvm-project/clang/lib/Driver/ToolChains/HIPUtility.cpp b/external/llvm-project/clang/lib/Driver/ToolChains/HIPUtility.cpp
index 08c647dfcb6f..6ee38abcac17 100644
--- a/external/llvm-project/clang/lib/Driver/ToolChains/HIPUtility.cpp
+++ b/external/llvm-project/clang/lib/Driver/ToolChains/HIPUtility.cpp
@@ -36,7 +36,7 @@ using llvm::dyn_cast;
 #endif
 
 namespace {
-const unsigned HIPCodeObjectAlign = 4096;
+const unsigned HIPCodeObjectAlign = 65536;
 } // namespace
 
 // Constructs a triple string for clang offload bundler.
@@ -227,7 +227,12 @@ void HIP::constructHIPFatbinCommand(Compilation &C, const JobAction &JA,
 
   // ToDo: Remove the dummy host binary entry which is required by
   // clang-offload-bundler.
+#if defined(__x86_64)
   std::string BundlerTargetArg = "-targets=host-x86_64-unknown-linux";
+#elif defined(__loongarch64)
+  std::string BundlerTargetArg = "-targets=host-loongarch64-unknown-linux";
+#else
+#endif
   // AMDGCN:
   // For code object version 2 and 3, the offload kind in bundle ID is 'hip'
   // for backward compatibility. For code object version 4 and greater, the
diff --git a/external/llvm-project/clang/tools/clang-linker-wrapper/ClangLinkerWrapper.cpp b/external/llvm-project/clang/tools/clang-linker-wrapper/ClangLinkerWrapper.cpp
index 1de1a30a718f..6c811de81b64 100644
--- a/external/llvm-project/clang/tools/clang-linker-wrapper/ClangLinkerWrapper.cpp
+++ b/external/llvm-project/clang/tools/clang-linker-wrapper/ClangLinkerWrapper.cpp
@@ -404,15 +404,23 @@ fatbinary(ArrayRef<std::pair<StringRef, StringRef>> InputFiles,
   SmallVector<StringRef, 16> CmdArgs;
   CmdArgs.push_back(*OffloadBundlerPath);
   CmdArgs.push_back("-type=o");
+#if defined(__x86_64)
   CmdArgs.push_back("-bundle-align=4096");
-
+#elif defined(__loongarch64)
+  CmdArgs.push_back("-bundle-align=65536");
+#else
+#endif
   if (Args.hasArg(OPT_compress))
     CmdArgs.push_back("-compress");
   if (auto *Arg = Args.getLastArg(OPT_compression_level_eq))
     CmdArgs.push_back(
         Args.MakeArgString(Twine("-compression-level=") + Arg->getValue()));
-
-  SmallVector<StringRef> Targets = {"-targets=host-x86_64-unknown-linux"};
+#if defined(__x86_64)
+   SmallVector<StringRef> Targets = {"-targets=host-x86_64-unknown-linux"};
+#elif defined(__loongarch64)
+   SmallVector<StringRef> Targets = {"-targets=host-loongarch64-unknown-linux"};
+#else
+#endif
   for (const auto &[File, Arch] : InputFiles)
     Targets.push_back(Saver.save("hipv4-amdgcn-amd-amdhsa--" + Arch));
   CmdArgs.push_back(Saver.save(llvm::join(Targets, ",")));
diff --git a/external/llvm-project/llvm/lib/Target/LoongArch/LoongArchISelLowering.cpp b/external/llvm-project/llvm/lib/Target/LoongArch/LoongArchISelLowering.cpp
index 285d5c2a63b2..42608171e5d2 100644
--- a/external/llvm-project/llvm/lib/Target/LoongArch/LoongArchISelLowering.cpp
+++ b/external/llvm-project/llvm/lib/Target/LoongArch/LoongArchISelLowering.cpp
@@ -326,6 +326,20 @@ LoongArchTargetLowering::LoongArchTargetLowering(const TargetMachine &TM,
                         VT, Expand);
     }
   }
+    // Lower f16 conversion operations into library calls
+  setOperationAction(ISD::FP16_TO_FP,        MVT::f32,   Expand);
+  setOperationAction(ISD::FP_TO_FP16,        MVT::f32,   Expand);
+  setOperationAction(ISD::FP16_TO_FP,        MVT::f64,   Expand);
+  setOperationAction(ISD::FP_TO_FP16,        MVT::f64,   Expand);
+  setOperationAction(ISD::SPLAT_VECTOR, MVT::f16, Custom);
+  setTruncStoreAction(MVT::f32, MVT::f16, Expand);
+
+  setLoadExtAction(ISD::EXTLOAD, MVT::f32, MVT::f16, Expand);
+  setLibcallName(RTLIB::FPEXT_F16_F32, "__extendhfsf2");
+  setLibcallName(RTLIB::FPROUND_F32_F16, "__truncsfhf2");
+  setLoadExtAction(ISD::EXTLOAD, MVT::f64, MVT::f16, Expand);
+  setTruncStoreAction(MVT::f64, MVT::f16, Expand);
+
 
   // Set DAG combine for LA32 and LA64.
 
diff --git a/mlir/tools/xmir-runner/CMakeLists.txt b/mlir/tools/xmir-runner/CMakeLists.txt
index 81f484a51ce5..d3cfbb4f0480 100644
--- a/mlir/tools/xmir-runner/CMakeLists.txt
+++ b/mlir/tools/xmir-runner/CMakeLists.txt
@@ -14,6 +14,10 @@ if(MLIR_ENABLE_ROCM_RUNNER)
     ${rocmlir_conversion_libs}
     ${rocmlir_test_libs}
     LLVMX86AsmParser
+    LLVMX86Desc
+    LLVMX86CodeGen
+    LLVMX86Info
+    LLVMLoongArchAsmParser
     MLIRMHAL
     MLIRMHALTransforms
     MLIRMHALPipeline
