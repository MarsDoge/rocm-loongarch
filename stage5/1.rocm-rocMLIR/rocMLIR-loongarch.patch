diff --git a/external/llvm-project/clang/lib/Basic/Targets/LoongArch.h b/external/llvm-project/clang/lib/Basic/Targets/LoongArch.h
index 646c8d071f1d..df69a65c9780 100644
--- a/external/llvm-project/clang/lib/Basic/Targets/LoongArch.h
+++ b/external/llvm-project/clang/lib/Basic/Targets/LoongArch.h
@@ -38,6 +38,8 @@ public:
     SuitableAlign = 128;
     WCharType = SignedInt;
     WIntType = UnsignedInt;
+    HasFloat128 = true;
+    HasFloat16 = true;
   }
 
   StringRef getABI() const override { return ABI; }
diff --git a/external/llvm-project/clang/lib/CodeGen/BackendUtil.cpp b/external/llvm-project/clang/lib/CodeGen/BackendUtil.cpp
index 937a8dc40667..ca2c80040767 100644
--- a/external/llvm-project/clang/lib/CodeGen/BackendUtil.cpp
+++ b/external/llvm-project/clang/lib/CodeGen/BackendUtil.cpp
@@ -322,6 +322,7 @@ getCodeModel(const CodeGenOptions &CodeGenOpts) {
                            .Case("kernel", llvm::CodeModel::Kernel)
                            .Case("medium", llvm::CodeModel::Medium)
                            .Case("large", llvm::CodeModel::Large)
+                           .Case("extreme", llvm::CodeModel::Large)
                            .Case("default", ~1u)
                            .Default(~0u);
   assert(CodeModel != ~0u && "invalid code model!");
diff --git a/external/llvm-project/clang/lib/Driver/ToolChains/HIPUtility.cpp b/external/llvm-project/clang/lib/Driver/ToolChains/HIPUtility.cpp
index 6f8c563c22aa..16ab3b1174ba 100644
--- a/external/llvm-project/clang/lib/Driver/ToolChains/HIPUtility.cpp
+++ b/external/llvm-project/clang/lib/Driver/ToolChains/HIPUtility.cpp
@@ -24,7 +24,7 @@ using namespace llvm::opt;
 #endif
 
 namespace {
-const unsigned HIPCodeObjectAlign = 4096;
+const unsigned HIPCodeObjectAlign = 65536;
 } // namespace
 
 // Constructs a triple string for clang offload bundler.
@@ -52,7 +52,12 @@ void HIP::constructHIPFatbinCommand(Compilation &C, const JobAction &JA,
 
   // ToDo: Remove the dummy host binary entry which is required by
   // clang-offload-bundler.
+#if defined(__x86_64)
   std::string BundlerTargetArg = "-targets=host-x86_64-unknown-linux";
+#elif defined(__loongarch64)
+  std::string BundlerTargetArg = "-targets=host-loongarch64-unknown-linux";
+#else
+#endif
   // AMDGCN:
   // For code object version 2 and 3, the offload kind in bundle ID is 'hip'
   // for backward compatibility. For code object version 4 and greater, the
diff --git a/external/llvm-project/clang/lib/Driver/ToolChains/Linux.cpp b/external/llvm-project/clang/lib/Driver/ToolChains/Linux.cpp
index c6fb290ffdb4..f8efd738c41b 100644
--- a/external/llvm-project/clang/lib/Driver/ToolChains/Linux.cpp
+++ b/external/llvm-project/clang/lib/Driver/ToolChains/Linux.cpp
@@ -699,7 +699,7 @@ void Linux::AddHIPRuntimeLibArgs(const ArgList &Args,
     CmdArgs.append(
         {"-rpath", Args.MakeArgString(RocmInstallation.getLibPath())});
 
-  CmdArgs.push_back("-lamdhip64");
+  CmdArgs.push_back("/opt/rocm-next/lib64/libamdhip64.so");
 }
 
 void Linux::AddIAMCUIncludeArgs(const ArgList &DriverArgs,
diff --git a/external/llvm-project/clang/tools/clang-linker-wrapper/ClangLinkerWrapper.cpp b/external/llvm-project/clang/tools/clang-linker-wrapper/ClangLinkerWrapper.cpp
index 1daa58f20fd5..60c2fc74c3c9 100644
--- a/external/llvm-project/clang/tools/clang-linker-wrapper/ClangLinkerWrapper.cpp
+++ b/external/llvm-project/clang/tools/clang-linker-wrapper/ClangLinkerWrapper.cpp
@@ -462,9 +462,13 @@ fatbinary(ArrayRef<std::pair<StringRef, StringRef>> InputFiles,
   SmallVector<StringRef, 16> CmdArgs;
   CmdArgs.push_back(*OffloadBundlerPath);
   CmdArgs.push_back("-type=o");
-  CmdArgs.push_back("-bundle-align=4096");
-
+  CmdArgs.push_back("-bundle-align=65536");
+#if defined(__x86_64)
   SmallVector<StringRef> Targets = {"-targets=host-x86_64-unknown-linux"};
+#elif defined(__loongarch64)
+  SmallVector<StringRef> Targets = {"-targets=host-loongarch64-unknown-linux"};
+#else
+#endif
   for (const auto &[File, Arch] : InputFiles)
     Targets.push_back(Saver.save("hipv4-amdgcn-amd-amdhsa--" + Arch));
   CmdArgs.push_back(Saver.save(llvm::join(Targets, ",")));
@@ -610,6 +614,7 @@ Expected<StringRef> linkDevice(ArrayRef<StringRef> InputFiles,
   case Triple::aarch64_be:
   case Triple::ppc64:
   case Triple::ppc64le:
+  case Triple::loongarch64:
     return generic::link(InputFiles, Args);
   default:
     return createStringError(inconvertibleErrorCode(),
diff --git a/external/llvm-project/llvm/lib/Target/LoongArch/LoongArchISelLowering.cpp b/external/llvm-project/llvm/lib/Target/LoongArch/LoongArchISelLowering.cpp
index 4a64a9484ab6..2aee6aa7af76 100644
--- a/external/llvm-project/llvm/lib/Target/LoongArch/LoongArchISelLowering.cpp
+++ b/external/llvm-project/llvm/lib/Target/LoongArch/LoongArchISelLowering.cpp
@@ -201,6 +201,20 @@ LoongArchTargetLowering::LoongArchTargetLowering(const TargetMachine &TM,
   setTargetDAGCombine(ISD::AND);
   setTargetDAGCombine(ISD::OR);
   setTargetDAGCombine(ISD::SRL);
+    // Lower f16 conversion operations into library calls
+  setOperationAction(ISD::FP16_TO_FP,        MVT::f32,   Expand);
+  setOperationAction(ISD::FP_TO_FP16,        MVT::f32,   Expand);
+  setOperationAction(ISD::FP16_TO_FP,        MVT::f64,   Expand);
+  setOperationAction(ISD::FP_TO_FP16,        MVT::f64,   Expand);
+  setOperationAction(ISD::SPLAT_VECTOR, MVT::f16, Custom);
+  setTruncStoreAction(MVT::f32, MVT::f16, Expand);
+
+  setLoadExtAction(ISD::EXTLOAD, MVT::f32, MVT::f16, Expand);
+  setLibcallName(RTLIB::FPEXT_F16_F32, "__extendhfsf2");
+  setLibcallName(RTLIB::FPROUND_F32_F16, "__truncsfhf2");
+  setLoadExtAction(ISD::EXTLOAD, MVT::f64, MVT::f16, Expand);
+  setTruncStoreAction(MVT::f64, MVT::f16, Expand);
+
 }
 
 bool LoongArchTargetLowering::isOffsetFoldingLegal(
diff --git a/mlir/test/CAPI/CMakeLists.txt b/mlir/test/CAPI/CMakeLists.txt
index d8472747bdbc..fffad61f7ca2 100644
--- a/mlir/test/CAPI/CMakeLists.txt
+++ b/mlir/test/CAPI/CMakeLists.txt
@@ -7,6 +7,7 @@ set(LLVM_OPTIONAL_SOURCES
 
 set(LLVM_LINK_COMPONENTS
   X86
+  LoongArch
 )
 
 add_llvm_executable(mlir-mixr-capi-test
diff --git a/mlir/tools/xmir-runner/CMakeLists.txt b/mlir/tools/xmir-runner/CMakeLists.txt
index 3ac4a797813a..45047ce4d371 100644
--- a/mlir/tools/xmir-runner/CMakeLists.txt
+++ b/mlir/tools/xmir-runner/CMakeLists.txt
@@ -14,6 +14,10 @@ if(MLIR_ENABLE_ROCM_RUNNER)
     ${rocmlir_conversion_libs}
     ${rocmlir_test_libs}
     LLVMX86AsmParser
+    LLVMX86Desc
+    LLVMX86CodeGen
+    LLVMX86Info
+    LLVMLoongArchAsmParser
     MLIRParser
     MLIRRocmExecutionEngineUtils
     MLIRJitRunner
